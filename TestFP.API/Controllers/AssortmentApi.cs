/*
 * Testaufgabe Ilya Kuznetsov
 *
 * Create a simple C#/.NET Restful API service, that • reads from any URL with JSON-Data a list of product data. The URL to read from is given below and contains mostly beers.  • has three different routes and questions to analyse the JSON-Data given.  o Most expensive and cheapest beer per litre.  o Which beers cost exactly €17.99? Order the result by price per litre (cheapest first).  o Which one product comes in the most bottles?  • It also has one route to get the answer to all routes or questions at once.  • Any result or output should be in JSON, too.
 *
 * OpenAPI spec version: 1.0
 * Contact: ilya.v.kuznetsov@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using TestFP.API.Attributes;

using Microsoft.AspNetCore.Authorization;
using TestFP.API.Models;
using TestFP.Models;
using System.Threading.Tasks;
using System.Linq;

namespace TestFP.API.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AssortmentApiController : ControllerBase
    { 
        /// <summary>
        /// get-all-details
        /// </summary>
        /// <remarks>Combines information from the methods priceRange, priceExactly, mostBottles. Response contains list of apiResult for each method.</remarks>
        /// <param name="url">URL to JSON with articles</param>
        /// <response code="200">OK</response>
        /// <response code="404">url is not accessible or there is no json in response</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/assortment/allDetails")]
        [ValidateModelState]
        [SwaggerOperation("GetAssortmentAllDetails")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ApiResult>), description: "OK")]
        [SwaggerResponse(statusCode: 500, type: typeof(List<ApiResult>), description: "Error")]
        public virtual async Task<IActionResult> GetAssortmentAllDetails([FromQuery]string url)
        {
            List<ApiResult> result = new List<ApiResult>();
            var apiResult = await GetArticlesWithMostBottles(url);
            result.Add(apiResult);
            result.Add(await GetArticlesPriceRange(url));
            result.Add(await GetArticlesByPrice(url));

            return StatusCode(result.Any(i => !i.Success)? 500:200, result);
        }

        /// <summary>
        /// get-by-most-bottles
        /// </summary>
        /// <remarks>Which one product comes in the most bottles? Response contains list of requested articles</remarks>
        /// <param name="url">URL to JSON with articles</param>
        /// <response code="200">OK</response>
        /// <response code="404">url is not accessible or there is no json in response</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/assortment/mostBottles")]
        [ValidateModelState]
        [SwaggerOperation("GetAssortmentMostBottles")]
        [SwaggerResponse(statusCode: 200, type: typeof(Article), description: "OK")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResult), description: "Error")]
        public virtual async Task<IActionResult> GetAssortmentMostBottles([FromQuery]string url)
        {
            ApiResult apiResult = await GetArticlesWithMostBottles(url);
            return StatusCode(apiResult.Success? 200:500, apiResult);
         }


        /// <summary>
        /// get-by-pricve-exactly
        /// </summary>
        /// <remarks>Which beers cost exactly €17.99? Response has an array with the requested articles ordered by price per litre </remarks>
        /// <param name="url">URL to JSON with articles</param>
        /// <response code="200">OK</response>
        /// <response code="404">url is not accessible or there is no json in response</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/assortment/priceExactly")]
        [ValidateModelState]
        [SwaggerOperation("GetAssortmentPriceExactly")]
        [SwaggerResponse(statusCode: 200, type: typeof(Article), description: "OK")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResult), description: "Error")]
        public virtual async Task<IActionResult> GetAssortmentPriceExactly([FromQuery]string url)
        {
            ApiResult apiResult = await GetArticlesByPrice(url);
            return StatusCode(apiResult.Success ? 200 : 500, apiResult);
        }

        /// <summary>
        /// get-price-range
        /// </summary>
        /// <remarks>Identifies the most expensive and cheapest beer per litre from the specified json list. The response object contains an array of articles. Tagged with \&quot;cheapest\&quot;/\&quot;most expensive\&quot; as there could be multiple articles with the same price.</remarks>
        /// <param name="url">URL to JSON with articles</param>
        /// <response code="200">OK</response>
        /// <response code="404">url is not accessible or there is no json in response</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/assortment/priceRange")]
        [ValidateModelState]
        [SwaggerOperation("GetAssortmentPriceRange")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResult), description: "OK")]
        [SwaggerResponse(statusCode: 500, type: typeof(ApiResult), description: "Error")]
        public virtual async Task<IActionResult> GetAssortmentPriceRange([FromQuery]string url)
        {
            ApiResult apiResult = await GetArticlesPriceRange(url);
            return StatusCode(apiResult.Success ? 200 : 500, apiResult);
        }
        private async Task<ApiResult> GetArticlesWithMostBottles(string url)
        {
            var analyzer = new TestFP.AssortmentManagement.AssortmentAnalyzer(new TestFP.AssortmentManagement.AssortmentLoader(url));
            var articles = await analyzer.ArticlesWithMostBottles();

            if (!analyzer.Valid)
            {
                return new ApiResult
                {
                    Message = analyzer.Msg,
                    Success = false,
                    Method = "GetAssortmentMostBottles"
                };
            }
            return new ApiResult
            {
                Result = articles,
                Success = true,
                Method = "GetAssortmentMostBottles"
            };
        }
        private async Task<ApiResult> GetArticlesPriceRange(string url)
        {
            var analyzer = new TestFP.AssortmentManagement.AssortmentAnalyzer(new TestFP.AssortmentManagement.AssortmentLoader(url));
            var articles = await analyzer.ArticlesPriceRange();

            if (!analyzer.Valid)
            {
                return new ApiResult
                {
                    Message = analyzer.Msg,
                    Success = false,
                    Method = "GetArticlesPriceRange"
                };
            }
            return new ApiResult
            {
                Result = articles,
                Success = true,
                Method = "GetArticlesPriceRange"
            };


        }
        private async Task<ApiResult> GetArticlesByPrice(string url)
        {
            var analyzer = new TestFP.AssortmentManagement.AssortmentAnalyzer(new TestFP.AssortmentManagement.AssortmentLoader(url));
            var articles = await analyzer.ArticlesWithPriceExactly(17.99);

            if (!analyzer.Valid)
            {
                return new ApiResult
                {
                    Message = analyzer.Msg,
                    Success = false,
                    Method = "GetArticlesByPrice"
                };
            }
            return new ApiResult
            {
                Result = articles,
                Success = true,
                Method = "GetArticlesByPrice"
            };


        }
    }
}
