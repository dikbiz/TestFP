/*
 * Testaufgabe Ilya Kuznetsov
 *
 * Create a simple C#/.NET Restful API service, that • reads from any URL with JSON-Data a list of product data. The URL to read from is given below and contains mostly beers.  • has three different routes and questions to analyse the JSON-Data given.  o Most expensive and cheapest beer per litre.  o Which beers cost exactly €17.99? Order the result by price per litre (cheapest first).  o Which one product comes in the most bottles?  • It also has one route to get the answer to all routes or questions at once.  • Any result or output should be in JSON, too.
 *
 * OpenAPI spec version: 1.0
 * Contact: ilya.v.kuznetsov@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using TestFP.Models;

namespace TestFP.API.Models
{
    /// <summary>
    /// Response of API methods
    /// </summary>
    [DataContract]
    public partial class ApiResult : IEquatable<ApiResult>
    {
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [Required]

        [DataMember(Name = "success")]
        public bool Success { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>

        [DataMember(Name = "method")]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>

        [DataMember(Name = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>

        [DataMember(Name = "result")]
        public List<Article> Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiResult {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiResult)obj);
        }

        /// <summary>
        /// Returns true if ApiResult instances are equal
        /// </summary>
        /// <param name="other">Instance of ApiResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiResult other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Success == other.Success ||
                    Success.Equals(other.Success)
                ) &&
                (
                    Method == other.Method ||
                    Method != null &&
                    Method.Equals(other.Method)
                ) &&
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) &&
                (
                    Result == other.Result ||
                    Result != null &&
                    Result.SequenceEqual(other.Result)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                hashCode = hashCode * 59 + Success.GetHashCode();
                if (Method != null)
                    hashCode = hashCode * 59 + Method.GetHashCode();
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ApiResult left, ApiResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApiResult left, ApiResult right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
